package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PlayerUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.*
import net.minecraft.network.play.server.S07PacketRespawn
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.INetHandlerPlayServer
import java.util.concurrent.LinkedBlockingQueue
import net.minecraft.network.NetHandlerPlayServer

class Hypixel2 : DisablerMode("Hypixel2") {
    private val disabler1 = BoolValue("${valuePrefix}disabler1", true)
    private val disabler1b = BoolValue("${valuePrefix}disabler1b", true).displayable{ disabler1.get() }
    private val releasePackets1b = IntegerValue("${valuePrefix}1B-PacketReleaseTime", 120, 10, 1000).displayable{ disabler1.get() && disabler1b.get()}
    private val noPacketTicks1b = IntegerValue("${valuePrefix}1B-NoPacketTicks", 70, 10, 200).displayable{ disabler1.get() && disabler1b.get()}
    private val TpBuffer1b = IntegerValue("${valuePrefix}1B-NoPacketTicks", 10, 1, 30).displayable{ disabler1.get() && disabler1b.get()}
    private val disabler2 = BoolValue("${valuePrefix}disabler2", false)
    
    private var expectedTeleport = false
    private val timer = MSTimer()
    private val packets = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    
    
    override fun onUpdate() {
        if (disabler1.get()) {
            if (disabler1b.get()) {
                if (mc.thePlayer.ticksExisted == 80 && !expectedTeleport) {
                    mc.thePlayer.ticksExisted = 0
                    expectedTeleport = true
                }
                if (timer.hasReached(releasePackets1b.get().toLong())) {
                    while (!packets.isEmpty()) {
                        mc.netHandler.addToSendQueue(packets.take())
                    }
                    timer.reset()
                }

            }
            
        }
        
    }
    
    override fun onPacket(event: PacketEvent) {
      val packet = event.packet
      var isCanceled = false
      
      if (disabler1.get()) {
        if (disabler1b.get()) {
            if (packet is C03PacketPlayer && mc.thePlayer.ticksExisted < 70) {
                event.cancelEvent()
                isCanceled = true
            }
            if (packet is C0BPacketEntityAction) {
                event.cancelEvent()
                isCanceled = true
            }

            if (!isCanceled && (packet is C03PacketPlayer || packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive)) {
                event.cancelEvent()
                isCanceled = true
                packets.add(packet as Packet<INetHandlerPlayServer>)
            }


            if (packet is C03PacketPlayer) {
                if (!mc.thePlayer.isUsingItem() && !packet.isMoving()) {
                    event.cancelEvent()
                    isCanceled = true
                }
            }


            if (packet is C05PacketPlayerLook) {
                if (!mc.thePlayer.onGround) {
                    event.cancelEvent()
                    isCanceled = true
                    mc.netHandler.addToSendQueue(C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), false)
                }
            }



        }
      }
    }
}
